// <auto-generated />
using System;
using Entities.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(EfSchoolContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Entities.Concrete.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Entities.Concrete.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("StudentId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("Entities.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Entities.Concrete.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Entities.Concrete.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Entities.Concrete.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Bırthdate")
                        .HasColumnType("datetime");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Entities.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Entities.Concrete.Class", b =>
                {
                    b.HasOne("Entities.Concrete.Section", "Section")
                        .WithMany("Classes")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Classes_Sections");

                    b.HasOne("Entities.Concrete.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Classes_Teachers");

                    b.Navigation("Section");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Entities.Concrete.Homework", b =>
                {
                    b.HasOne("Entities.Concrete.Post", "Post")
                        .WithMany("Homeworks")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Homeworks_Posts");

                    b.HasOne("Entities.Concrete.Student", "Student")
                        .WithMany("Homeworks")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Homeworks_Students");

                    b.Navigation("Post");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Concrete.Lesson", b =>
                {
                    b.HasOne("Entities.Concrete.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Lessons_Sections");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Entities.Concrete.Parent", b =>
                {
                    b.HasOne("Entities.Concrete.Gender", "Gender")
                        .WithMany("Parents")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Parents_Genders");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Entities.Concrete.Post", b =>
                {
                    b.HasOne("Entities.Concrete.Section", "Section")
                        .WithMany("Posts")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_Sections");

                    b.HasOne("Entities.Concrete.Teacher", "Teacher")
                        .WithMany("Posts")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_Teachers");

                    b.Navigation("Section");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.HasOne("Entities.Concrete.Gender", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Genders");

                    b.HasOne("Entities.Concrete.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Parents");

                    b.Navigation("Gender");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Entities.Concrete.Teacher", b =>
                {
                    b.HasOne("Entities.Concrete.Gender", "Gender")
                        .WithMany("Teachers")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Genders");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Entities.Concrete.Gender", b =>
                {
                    b.Navigation("Parents");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Entities.Concrete.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Concrete.Post", b =>
                {
                    b.Navigation("Homeworks");
                });

            modelBuilder.Entity("Entities.Concrete.Section", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Lessons");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.Navigation("Homeworks");
                });

            modelBuilder.Entity("Entities.Concrete.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
